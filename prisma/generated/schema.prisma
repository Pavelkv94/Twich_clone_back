generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email       String  @unique
  password    String
  username    String  @unique
  displayName String  @map("display_name")
  avatar      String?
  bio         String?

  telegramId String? @unique @map("telegram_id")

  isVerified      Boolean @default(false) @map("is_verified")
  isEmailVerified Boolean @default(false) @map("is_email_verified")

  isTotpEnabled Boolean @default(false) @map("is_totp_enabled")
  totpSecret    String? @map("totp_secret")

  isDeactivated Boolean   @default(false) @map("is_deactivated")
  deactivatedAt DateTime? @map("deactivated_at")

  tokens                   Token[]
  socialLinks              SocialLink[]
  stream                   Stream?
  chatMessages             ChatMessage[]
  followers                Follow[]                  @relation(name: "followers")
  followings               Follow[]                  @relation(name: "followings")
  notifications            Notification[]
  notificationSettings     NotificationSettings?
  transactions             Transaction[]
  sponsorshipPlans         SponsorshipPlan[]
  sponsorshipSubscriptions SponsorshipSubscription[] @relation(name: "sponsorship_subscriptions")
  sponsors                 SponsorshipSubscription[] @relation(name: "sponsors")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Token {
  id String @id @default(uuid())

  token     String    @unique
  type      TokenType
  expiredAt DateTime  @map("expired_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  DEACTIVATE_ACCOUNT
  TELEGRAM_AUTH

  @@map("token_types")
}

model SocialLink {
  id String @id @default(uuid())

  title    String
  url      String
  position Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("social_links")
}

model Stream {
  id String @id @default(uuid())

  title        String
  thumbnailUrl String? @map("thumbnail_url")

  ingressId String? @unique @map("ingress_id")
  serverUrl String? @map("server_url")
  streamKey String? @map("stream_key")

  isLive Boolean @default(false) @map("is_live")

  isChatEnabled              Boolean @default(false) @map("is_chat_enabled")
  isChatFollowersOnly        Boolean @default(false) @map("is_chat_followers_only")
  isChatPremiumFollowersOnly Boolean @default(false) @map("is_chat_premium_followers_only")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @map("user_id")

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?   @map("category_id")

  chatMessages ChatMessage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("streams")
}

model Category {
  id String @id @default(uuid())

  title        String
  slug         String  @unique
  description  String?
  thumbnailUrl String? @map("thumbnail_url")

  streams Stream[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model ChatMessage {
  id String @id @default(uuid())

  message String @map("message")

  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String @map("stream_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chat_messages")
}

model Follow {
  id String @id @default(uuid())

  follower   User   @relation(name: "followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @map("follower_id")

  following   User   @relation(name: "followings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Notification {
  id String @id @default(uuid())

  message String           @map("message")
  type    NotificationType @map("type")
  isRead  Boolean          @default(false) @map("is_read")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("notifications")
}

enum NotificationType {
  STREAM_STARTED
  NEW_FOLLOWER
  NEW_SPONSORSHIP
  ENABLE_TWO_FACTOR_AUTH
  VERIFIED_CHANNEL

  @@map("notification_types")
}

model NotificationSettings {
  id String @id @default(uuid())

  siteNotification     Boolean @default(true) @map("site_notification")
  telegramNotification Boolean @default(true) @map("telegram_notification")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notification_settings")
}

model Transaction {
  id String @id @default(uuid())

  amount   Float  @map("amount")
  currency String @map("currency")

  stripeSubscriptionId String?           @map("stripe_subscription_id")
  status               TransactionStatus @default(PENDING) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED

  @@map("transaction_statuses")
}

model SponsorshipPlan {
  id String @id @default(uuid())

  title       String  @map("title")
  description String? @map("description")
  price       Float   @map("price")

  stripeProductId String @map("stripe_product_id")
  stripePlanId    String @map("stripe_plan_id")

  channel   User   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String @map("channel_id")

  sponsorshipSubscription SponsorshipSubscription[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sponsorshop_plans")
}

model SponsorshipSubscription {
  id String @id @default(uuid())

  expiresAt DateTime @map("expires_at")

  user   User   @relation(name: "sponsorship_subscriptions", fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  channel   User   @relation(name: "sponsors", fields: [channelId], references: [id], onDelete: Cascade)
  channelId String @map("channel_id")

  plan   SponsorshipPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId String          @map("plan_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sponsorship_subscriptions")
}
