# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoryModel {
  createdAt: DateTime!
  description: String
  id: String!
  slug: String!
  streams: [StreamModel!]
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
}

input ChangeEmailInput {
  email: String!
}

type ChangeNotificationSettingsResponse {
  notificationSettings: NotificationSettingsModel!
  telegramAuthToken: String
}

input ChangePassInput {
  newPassword: String!
  password: String!
}

input ChangeProfileInput {
  bio: String!
  displayName: String!
  username: String!
}

input ChangeStreamInfoInput {
  categoryId: String!
  title: String!
}

type ChatMessageModel {
  createdAt: DateTime!
  id: String!
  message: String!
  stream: StreamModel!
  streamId: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

input ChatSettingsInput {
  isChatEnabled: Boolean!
  isChatFollowersOnly: Boolean!
  isChatPremiumFollowersOnly: Boolean!
}

input CreatePlanInput {
  description: String
  price: Float!
  title: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeactivateAccountInput {
  email: String!
  password: String!
  totpPin: String
}

type DeviceModel {
  browser: String!
  ip: String!
  os: String!
  type: String!
  userAgent: String!
}

input EnableTotpInput {
  pin: String!
  secret: String!
}

input FiltersInput {
  searchTerm: String
  skip: Float
  take: Float
}

type FollowModel {
  createdAt: DateTime!
  follower: UserModel!
  followerId: String!
  following: UserModel!
  followingId: String!
  id: String!
  updatedAt: DateTime!
}

type LocationModel {
  city: String!
  country: String!
  latitude: Float!
  longitude: Float!
}

input LoginInput {
  login: String!
  password: String!
  totpPin: String
}

type MakePaymentModel {
  url: String!
}

type Mutation {
  changeEmail(input: ChangeEmailInput!): Boolean!
  changeNotificationSettings(input: NotificationSettingsInput!): ChangeNotificationSettingsResponse!
  changePass(input: ChangePassInput!): Boolean!
  changeProfile(input: ChangeProfileInput!): Boolean!
  changeStreamInfo(input: ChangeStreamInfoInput!): Boolean!
  clearCookies: String!
  createAccount(input: CreateUserInput!): UserModel!
  createIngress(ingressType: Float!): Boolean!
  createPlan(input: CreatePlanInput!): Boolean!
  createSocialLink(input: SocialLinkInput!): Boolean!
  deactivateAccount(input: DeactivateAccountInput!): Boolean!
  deleteSocialLink(id: String!): Boolean!
  disableTotp: Boolean!
  enableTotp(input: EnableTotpInput!): Boolean!
  follow(channelId: String!): Boolean!
  generateStreamToken(input: StreamTokenInput!): TokenModel!
  login(input: LoginInput!): UserModel!
  logout: String!
  makePayment(planId: String!): MakePaymentModel!
  removePlan(planId: String!): Boolean!
  removeSessionById(id: String!): String!
  removeStreamThumbnail: Boolean!
  reorderSocialLinks(list: [SocialLinkOrderInput!]!): Boolean!
  resetPassword(input: ResetPassInput!): Boolean!
  sendMessage(input: SendMessageInput!): ChatMessageModel!
  setNewPassword(input: NewPasswordInput!): Boolean!
  unfollow(channelId: String!): Boolean!
  updateChatSettings(input: ChatSettingsInput!): Boolean!
  updateSocialLink(input: SocialLinkInput!): Boolean!
  verifyAccount(input: VerificationInput!): UserModel!
}

input NewPasswordInput {
  confirmPassword: String!
  password: String!
  token: String!
}

type NotificationModel {
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: String!
  title: String!
  type: NotificationType!
  updatedAt: DateTime!
  userId: String!
}

input NotificationSettingsInput {
  siteNotification: Boolean!
  telegramNotification: Boolean!
}

type NotificationSettingsModel {
  createdAt: DateTime!
  id: String!
  siteNotification: Boolean!
  telegramNotification: Boolean!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

"""Notification type"""
enum NotificationType {
  ENABLE_TWO_FACTOR_AUTH
  NEW_FOLLOWER
  NEW_SPONSORSHIP
  STREAM_STARTED
  VERIFIED_CHANNEL
}

type PlanModel {
  channelId: String!
  createdAt: DateTime!
  description: String
  id: String!
  price: Float!
  stripePlanId: String!
  stripeProductId: String!
  title: String!
  updatedAt: DateTime!
}

type Query {
  findAllCategories: [CategoryModel!]!
  findAllStreams(filters: FiltersInput): [StreamModel!]!
  findCategoryBySlug(slug: String!): CategoryModel!
  findChannelByUsername(username: String!): UserModel!
  findCurrentSession: SessionModel!
  findFollowersCountByChannel(channelId: String!): Float!
  findMessagesByStreamId(streamId: String!): [ChatMessageModel!]!
  findMyFollowers: [FollowModel!]!
  findMyFollowings: [FollowModel!]!
  findMyPlans: [PlanModel!]!
  findMySponsors: [SubscriptionModel!]!
  findMyTransactions: [TransactionModel!]!
  findNotificationsByUser: [NotificationModel!]!
  findRandomCategories: [CategoryModel!]!
  findRandomStreams: [StreamModel!]!
  findRecommendedChannels: [UserModel!]!
  findSessionsByUserId: [SessionModel!]!
  findSponsorsByChannel(channelId: String!): [SubscriptionModel!]!
  findUnreadNotificationsCount: Int!
  generateTotpSecret: TotpModel!
  getMe: UserModel!
  socialLinks: [SocialLinkModel!]!
}

input ResetPassInput {
  email: String!
}

input SendMessageInput {
  streamId: String!
  text: String!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

type SocialLinkModel {
  createdAt: DateTime!
  id: ID!
  position: Float!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

input SocialLinkOrderInput {
  id: String!
  position: Float!
}

type StreamModel {
  category: CategoryModel
  categoryId: String
  createdAt: DateTime!
  id: ID!
  ingressId: String
  isChatEnabled: Boolean!
  isChatFollowersOnly: Boolean!
  isChatPremiumFollowersOnly: Boolean!
  isLive: Boolean!
  serverUrl: String
  streamKey: String
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

input StreamTokenInput {
  channelId: String!
  userId: String!
}

type Subscription {
  chatMessageAdded(streamId: String!): ChatMessageModel!
}

type SubscriptionModel {
  channel: UserModel!
  channelId: String!
  createdAt: DateTime!
  expiresAt: DateTime!
  id: String!
  plan: PlanModel!
  planId: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type TokenModel {
  token: String!
}

type TotpModel {
  qrCode: String!
  secret: String!
}

type TransactionModel {
  amount: Float!
  channelId: String!
  createdAt: DateTime!
  currency: String!
  id: String!
  status: TransactionStatus!
  stripeSubscriptionId: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

enum TransactionStatus {
  EXPIRED
  FAILED
  PENDING
  SUCCESS
}

type UserModel {
  avatar: String
  bio: String
  createdAt: DateTime!
  deactivatedAt: DateTime
  displayName: String!
  email: String!
  followers: [FollowModel!]
  followings: [FollowModel!]
  id: ID!
  isDeactivated: Boolean!
  isEmailVerified: Boolean!
  isTotpEnabled: Boolean!
  isVerified: Boolean!
  notificationSettings: NotificationSettingsModel
  notifications: [NotificationModel!]
  password: String!
  sessions: [SessionModel!]
  socialLinks: [SocialLinkModel!]
  sponsorshipPlans: [PlanModel!]
  sponsorshipSubscriptions: [SubscriptionModel!]
  stream: StreamModel
  telegramId: String
  totpSecret: String
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}